{"$message_type":"diagnostic","message":"the trait bound `rss3::Message: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":4519,"byte_end":4524,"line_start":121,"line_end":121,"column_start":41,"column_end":46,"is_primary":true,"text":[{"text":"            self.inner.unary(req, path, codec).await","highlight_start":41,"highlight_end":46}],"label":"the trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<_, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":4502,"byte_end":4507,"line_start":121,"line_end":121,"column_start":24,"column_end":29,"is_primary":false,"text":[{"text":"            self.inner.unary(req, path, codec).await","highlight_start":24,"highlight_end":29}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<rss3::Message, _>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::client::Grpc::<T>::unary`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7101,"byte_end":7106,"line_start":207,"line_end":207,"column_start":18,"column_end":23,"is_primary":false,"text":[{"text":"    pub async fn unary<M1, M2, C>(","highlight_start":18,"highlight_end":23}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7416,"byte_end":7447,"line_start":217,"line_end":217,"column_start":12,"column_end":43,"is_primary":true,"text":[{"text":"        C: Codec<Encode = M1, Decode = M2>,","highlight_start":12,"highlight_end":43}],"label":"required by this bound in `Grpc::<T>::unary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rss3::Message: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:121:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.inner.unary(req, path, codec).await\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<_, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<rss3::Message, _>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::client::Grpc::<T>::unary`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs:217:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn unary<M1, M2, C>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        C: Codec<Encode = M1, Decode = M2>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::unary`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rss3::Message: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":4491,"byte_end":4525,"line_start":121,"line_end":121,"column_start":13,"column_end":47,"is_primary":true,"text":[{"text":"            self.inner.unary(req, path, codec).await","highlight_start":13,"highlight_end":47}],"label":"the trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<rss3::Message, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<rss3::Message, _>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::client::Grpc::<T>::unary`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7101,"byte_end":7106,"line_start":207,"line_end":207,"column_start":18,"column_end":23,"is_primary":false,"text":[{"text":"    pub async fn unary<M1, M2, C>(","highlight_start":18,"highlight_end":23}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7416,"byte_end":7447,"line_start":217,"line_end":217,"column_start":12,"column_end":43,"is_primary":true,"text":[{"text":"        C: Codec<Encode = M1, Decode = M2>,","highlight_start":12,"highlight_end":43}],"label":"required by this bound in `Grpc::<T>::unary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rss3::Message: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:121:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.inner.unary(req, path, codec).await\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<rss3::Message, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<rss3::Message, _>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::client::Grpc::<T>::unary`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs:217:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn unary<M1, M2, C>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        C: Codec<Encode = M1, Decode = M2>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::unary`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rss3::Message: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":4526,"byte_end":4531,"line_start":121,"line_end":121,"column_start":48,"column_end":53,"is_primary":true,"text":[{"text":"            self.inner.unary(req, path, codec).await","highlight_start":48,"highlight_end":53}],"label":"the trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<rss3::Message, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":4526,"byte_end":4531,"line_start":121,"line_end":121,"column_start":48,"column_end":53,"is_primary":false,"text":[{"text":"            self.inner.unary(req, path, codec).await","highlight_start":48,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"crates/obq-net/src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<rss3::Message, _>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::client::Grpc::<T>::unary`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7101,"byte_end":7106,"line_start":207,"line_end":207,"column_start":18,"column_end":23,"is_primary":false,"text":[{"text":"    pub async fn unary<M1, M2, C>(","highlight_start":18,"highlight_end":23}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7416,"byte_end":7447,"line_start":217,"line_end":217,"column_start":12,"column_end":43,"is_primary":true,"text":[{"text":"        C: Codec<Encode = M1, Decode = M2>,","highlight_start":12,"highlight_end":43}],"label":"required by this bound in `Grpc::<T>::unary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rss3::Message: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:121:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.inner.unary(req, path, codec).await\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<rss3::Message, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<rss3::Message, _>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::client::Grpc::<T>::unary`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs:217:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn unary<M1, M2, C>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        C: Codec<Encode = M1, Decode = M2>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::unary`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Ack: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":4519,"byte_end":4524,"line_start":121,"line_end":121,"column_start":41,"column_end":46,"is_primary":true,"text":[{"text":"            self.inner.unary(req, path, codec).await","highlight_start":41,"highlight_end":46}],"label":"the trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<_, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":4502,"byte_end":4507,"line_start":121,"line_end":121,"column_start":24,"column_end":29,"is_primary":false,"text":[{"text":"            self.inner.unary(req, path, codec).await","highlight_start":24,"highlight_end":29}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<rss3::Message, Ack>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::client::Grpc::<T>::unary`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7101,"byte_end":7106,"line_start":207,"line_end":207,"column_start":18,"column_end":23,"is_primary":false,"text":[{"text":"    pub async fn unary<M1, M2, C>(","highlight_start":18,"highlight_end":23}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7416,"byte_end":7447,"line_start":217,"line_end":217,"column_start":12,"column_end":43,"is_primary":true,"text":[{"text":"        C: Codec<Encode = M1, Decode = M2>,","highlight_start":12,"highlight_end":43}],"label":"required by this bound in `Grpc::<T>::unary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Ack: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:121:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.inner.unary(req, path, codec).await\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<_, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<rss3::Message, Ack>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::client::Grpc::<T>::unary`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs:217:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn unary<M1, M2, C>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        C: Codec<Encode = M1, Decode = M2>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::unary`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Ack: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":4491,"byte_end":4525,"line_start":121,"line_end":121,"column_start":13,"column_end":47,"is_primary":true,"text":[{"text":"            self.inner.unary(req, path, codec).await","highlight_start":13,"highlight_end":47}],"label":"the trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<rss3::Message, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<rss3::Message, Ack>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::client::Grpc::<T>::unary`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7101,"byte_end":7106,"line_start":207,"line_end":207,"column_start":18,"column_end":23,"is_primary":false,"text":[{"text":"    pub async fn unary<M1, M2, C>(","highlight_start":18,"highlight_end":23}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7416,"byte_end":7447,"line_start":217,"line_end":217,"column_start":12,"column_end":43,"is_primary":true,"text":[{"text":"        C: Codec<Encode = M1, Decode = M2>,","highlight_start":12,"highlight_end":43}],"label":"required by this bound in `Grpc::<T>::unary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Ack: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:121:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.inner.unary(req, path, codec).await\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<rss3::Message, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<rss3::Message, Ack>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::client::Grpc::<T>::unary`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs:217:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn unary<M1, M2, C>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        C: Codec<Encode = M1, Decode = M2>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::unary`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Ack: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":4526,"byte_end":4531,"line_start":121,"line_end":121,"column_start":48,"column_end":53,"is_primary":true,"text":[{"text":"            self.inner.unary(req, path, codec).await","highlight_start":48,"highlight_end":53}],"label":"the trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<rss3::Message, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":4526,"byte_end":4531,"line_start":121,"line_end":121,"column_start":48,"column_end":53,"is_primary":false,"text":[{"text":"            self.inner.unary(req, path, codec).await","highlight_start":48,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"crates/obq-net/src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<rss3::Message, Ack>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::client::Grpc::<T>::unary`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7101,"byte_end":7106,"line_start":207,"line_end":207,"column_start":18,"column_end":23,"is_primary":false,"text":[{"text":"    pub async fn unary<M1, M2, C>(","highlight_start":18,"highlight_end":23}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs","byte_start":7416,"byte_end":7447,"line_start":217,"line_end":217,"column_start":12,"column_end":43,"is_primary":true,"text":[{"text":"        C: Codec<Encode = M1, Decode = M2>,","highlight_start":12,"highlight_end":43}],"label":"required by this bound in `Grpc::<T>::unary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Ack: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:121:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            self.inner.unary(req, path, codec).await\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<rss3::Message, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<rss3::Message, Ack>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::client::Grpc::<T>::unary`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/client/grpc.rs:217:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn unary<M1, M2, C>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        C: Codec<Encode = M1, Decode = M2>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::unary`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Ack: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":10108,"byte_end":10113,"line_start":257,"line_end":257,"column_start":40,"column_end":45,"is_primary":true,"text":[{"text":"                        let res = grpc.unary(method, req).await;","highlight_start":40,"highlight_end":45}],"label":"the trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<_, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::server::Grpc::<T>::unary`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":6969,"byte_end":6974,"line_start":223,"line_end":223,"column_start":18,"column_end":23,"is_primary":false,"text":[{"text":"    pub async fn unary<S, B>(","highlight_start":18,"highlight_end":23}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":1559,"byte_end":1564,"line_start":48,"line_end":48,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    T: Codec,","highlight_start":8,"highlight_end":13}],"label":"required by this bound in `Grpc::<T>::unary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Ack: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:257:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let res = grpc.unary(method, req).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<_, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::server::Grpc::<T>::unary`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs:48:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Codec,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::unary`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn unary<S, B>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rss3::Message: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":10108,"byte_end":10113,"line_start":257,"line_end":257,"column_start":40,"column_end":45,"is_primary":true,"text":[{"text":"                        let res = grpc.unary(method, req).await;","highlight_start":40,"highlight_end":45}],"label":"the trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<_, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::server::Grpc::<T>::unary`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":6969,"byte_end":6974,"line_start":223,"line_end":223,"column_start":18,"column_end":23,"is_primary":false,"text":[{"text":"    pub async fn unary<S, B>(","highlight_start":18,"highlight_end":23}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":1559,"byte_end":1564,"line_start":48,"line_end":48,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    T: Codec,","highlight_start":8,"highlight_end":13}],"label":"required by this bound in `Grpc::<T>::unary`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rss3::Message: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:257:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let res = grpc.unary(method, req).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<_, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::server::Grpc::<T>::unary`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs:48:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Codec,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::unary`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn unary<S, B>(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Ack: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":9889,"byte_end":9918,"line_start":253,"line_end":253,"column_start":30,"column_end":59,"is_primary":true,"text":[{"text":"                            .apply_max_message_size_config(","highlight_start":30,"highlight_end":59}],"label":"the trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<_, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::server::Grpc::<T>::apply_max_message_size_config`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":6446,"byte_end":6475,"line_start":205,"line_end":205,"column_start":12,"column_end":41,"is_primary":false,"text":[{"text":"    pub fn apply_max_message_size_config(","highlight_start":12,"highlight_end":41}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":1559,"byte_end":1564,"line_start":48,"line_end":48,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    T: Codec,","highlight_start":8,"highlight_end":13}],"label":"required by this bound in `Grpc::<T>::apply_max_message_size_config`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Ack: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:253:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   .apply_max_message_size_config(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<_, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::server::Grpc::<T>::apply_max_message_size_config`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs:48:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Codec,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::apply_max_message_size_config`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn apply_max_message_size_config(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rss3::Message: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":9889,"byte_end":9918,"line_start":253,"line_end":253,"column_start":30,"column_end":59,"is_primary":true,"text":[{"text":"                            .apply_max_message_size_config(","highlight_start":30,"highlight_end":59}],"label":"the trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<_, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::server::Grpc::<T>::apply_max_message_size_config`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":6446,"byte_end":6475,"line_start":205,"line_end":205,"column_start":12,"column_end":41,"is_primary":false,"text":[{"text":"    pub fn apply_max_message_size_config(","highlight_start":12,"highlight_end":41}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":1559,"byte_end":1564,"line_start":48,"line_end":48,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    T: Codec,","highlight_start":8,"highlight_end":13}],"label":"required by this bound in `Grpc::<T>::apply_max_message_size_config`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rss3::Message: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:253:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   .apply_max_message_size_config(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<_, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::server::Grpc::<T>::apply_max_message_size_config`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs:48:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Codec,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::apply_max_message_size_config`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn apply_max_message_size_config(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Ack: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":9682,"byte_end":9706,"line_start":249,"line_end":249,"column_start":30,"column_end":54,"is_primary":true,"text":[{"text":"                            .apply_compression_config(","highlight_start":30,"highlight_end":54}],"label":"the trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<_, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::server::Grpc::<T>::apply_compression_config`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":5885,"byte_end":5909,"line_start":185,"line_end":185,"column_start":12,"column_end":36,"is_primary":false,"text":[{"text":"    pub fn apply_compression_config(","highlight_start":12,"highlight_end":36}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":1559,"byte_end":1564,"line_start":48,"line_end":48,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    T: Codec,","highlight_start":8,"highlight_end":13}],"label":"required by this bound in `Grpc::<T>::apply_compression_config`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Ack: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:249:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   .apply_compression_config(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<_, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::server::Grpc::<T>::apply_compression_config`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs:48:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Codec,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::apply_compression_config`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn apply_compression_config(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rss3::Message: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":9682,"byte_end":9706,"line_start":249,"line_end":249,"column_start":30,"column_end":54,"is_primary":true,"text":[{"text":"                            .apply_compression_config(","highlight_start":30,"highlight_end":54}],"label":"the trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<_, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::server::Grpc::<T>::apply_compression_config`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":5885,"byte_end":5909,"line_start":185,"line_end":185,"column_start":12,"column_end":36,"is_primary":false,"text":[{"text":"    pub fn apply_compression_config(","highlight_start":12,"highlight_end":36}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":1559,"byte_end":1564,"line_start":48,"line_end":48,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    T: Codec,","highlight_start":8,"highlight_end":13}],"label":"required by this bound in `Grpc::<T>::apply_compression_config`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rss3::Message: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:249:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   .apply_compression_config(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<_, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::server::Grpc::<T>::apply_compression_config`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs:48:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Codec,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::apply_compression_config`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn apply_compression_config(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Ack: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":9646,"byte_end":9651,"line_start":248,"line_end":248,"column_start":65,"column_end":70,"is_primary":true,"text":[{"text":"                        let mut grpc = tonic::server::Grpc::new(codec)","highlight_start":65,"highlight_end":70}],"label":"the trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<_, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":9621,"byte_end":9645,"line_start":248,"line_end":248,"column_start":40,"column_end":64,"is_primary":false,"text":[{"text":"                        let mut grpc = tonic::server::Grpc::new(codec)","highlight_start":40,"highlight_end":64}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::server::Grpc::<T>::new`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":1642,"byte_end":1645,"line_start":51,"line_end":51,"column_start":12,"column_end":15,"is_primary":false,"text":[{"text":"    pub fn new(codec: T) -> Self {","highlight_start":12,"highlight_end":15}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":1559,"byte_end":1564,"line_start":48,"line_end":48,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    T: Codec,","highlight_start":8,"highlight_end":13}],"label":"required by this bound in `Grpc::<T>::new`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Ack: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:248:65\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let mut grpc = tonic::server::Grpc::new(codec)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<_, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::server::Grpc::<T>::new`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs:48:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Codec,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::new`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(codec: T) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rss3::Message: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":9646,"byte_end":9651,"line_start":248,"line_end":248,"column_start":65,"column_end":70,"is_primary":true,"text":[{"text":"                        let mut grpc = tonic::server::Grpc::new(codec)","highlight_start":65,"highlight_end":70}],"label":"the trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<_, _>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":9621,"byte_end":9645,"line_start":248,"line_end":248,"column_start":40,"column_end":64,"is_primary":false,"text":[{"text":"                        let mut grpc = tonic::server::Grpc::new(codec)","highlight_start":40,"highlight_end":64}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `tonic::server::Grpc::<T>::new`","code":null,"level":"note","spans":[{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":1642,"byte_end":1645,"line_start":51,"line_end":51,"column_start":12,"column_end":15,"is_primary":false,"text":[{"text":"    pub fn new(codec: T) -> Self {","highlight_start":12,"highlight_end":15}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs","byte_start":1559,"byte_end":1564,"line_start":48,"line_end":48,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    T: Codec,","highlight_start":8,"highlight_end":13}],"label":"required by this bound in `Grpc::<T>::new`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rss3::Message: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:248:65\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let mut grpc = tonic::server::Grpc::new(codec)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<_, _>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tonic::server::Grpc::<T>::new`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/.cargo/registry/src/index.crates.io-6f17d22bba15001f/tonic-0.12.3/src/server/grpc.rs:48:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: Codec,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Grpc::<T>::new`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(codec: T) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Ack: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":10103,"byte_end":10126,"line_start":257,"line_end":257,"column_start":35,"column_end":58,"is_primary":true,"text":[{"text":"                        let res = grpc.unary(method, req).await;","highlight_start":35,"highlight_end":58}],"label":"the trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<Ack, rss3::Message>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Ack: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:257:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let res = grpc.unary(method, req).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `Ack`, which is required by `ProstCodec<Ack, rss3::Message>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `rss3::Message: prost::message::Message` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs","byte_start":10103,"byte_end":10126,"line_start":257,"line_end":257,"column_start":35,"column_end":58,"is_primary":true,"text":[{"text":"                        let res = grpc.unary(method, req).await;","highlight_start":35,"highlight_end":58}],"label":"the trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<Ack, rss3::Message>: Codec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `prost::message::Message`:\n  ()\n  Box<M>\n  String\n  Vec<u8>\n  bool\n  f32\n  f64\n  i32\nand 4 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `rss3::Message: prost::message::Message` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/test/Obliquery/obliquery/target/debug/build/obq-net-dd46e084d3274649/out/rss3.rs:257:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        let res = grpc.unary(method, req).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `prost::message::Message` is not implemented for `rss3::Message`, which is required by `ProstCodec<Ack, rss3::Message>: Codec`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `prost::message::Message`:\u001b[0m\n\u001b[0m              ()\u001b[0m\n\u001b[0m              Box<M>\u001b[0m\n\u001b[0m              String\u001b[0m\n\u001b[0m              Vec<u8>\u001b[0m\n\u001b[0m              bool\u001b[0m\n\u001b[0m              f32\u001b[0m\n\u001b[0m              f64\u001b[0m\n\u001b[0m              i32\u001b[0m\n\u001b[0m            and 4 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `ProstCodec<Ack, rss3::Message>` to implement `Codec`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 16 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 16 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
